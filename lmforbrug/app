# app.R
# This Shiny app reads pre-processed data (merged_data.rds) and provides interactive visualization.

library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)

# Load cleaned data
merged_data <- readRDS("/srv/shiny-server/kfaapps/data-scripts/data/merged_data.rds")

# Define UI
ui <- fluidPage(
  titlePanel("Medicinforbrug fra eSundhed.dk"),
  sidebarLayout(
    sidebarPanel(
      textAreaInput("atc_input", "Indtast ATC-kode:", rows = 1),
      uiOutput("product_selection"),
      uiOutput("subst_group_selection"),
      uiOutput("region_selection"),
      radioButtons("stratify_option", "Stratificering af data:",
                   choices = list(
                     "Ingen" = "None",
                     "Produktnavn" = "Produktnavn",
                     "Substitutionsgruppe" = "SubstGruppe",
                     "Region" = "Område"
                   ), selected = "None"),
      radioButtons("y_axis_option", "Y-akse:",
                   choices = list(
                     "Samlede tilskudsudgifter, kr." = "Regionale udgifter til medicintilskud, kr.",
                     "Tilskudsudgifter per 100.000 indbyggere, kr." = "Regionale udgifter til medicintilskud, kr. pr. indbygger",
                     "Samlet forbrug" = "Mængdesalg",
                     "Forbrug pr. 100.000 indbyggere" = "Mængdesalgsenhed pr. indbygger"
                   ), selected = "Regionale udgifter til medicintilskud, kr."),
      downloadButton("download_pdf", "Download figur som PDF")
    ),
    mainPanel(
      plotOutput("line_plot"),
      tableOutput("summary_table")
    )
  )
)

# Define Server logic
server <- function(input, output, session) {
  y_axis_labels <- list(
    "Regionale udgifter til medicintilskud, kr." = "Samlede tilskudsudgifter, kr.",
    "Regionale udgifter til medicintilskud, kr. pr. indbygger" = "Tilskudsudgifter per 100.000 indbyggere, kr.",
    "Mængdesalg" = "Samlet forbrug",
    "Mængdesalgsenhed pr. indbygger" = "Forbrug pr. 100.000 indbyggere"
  )

  filtered_data <- reactive({
    atc_codes <- unlist(strsplit(input$atc_input, "\n"))
    atc_codes <- atc_codes[atc_codes != ""]
    req(atc_codes)
    data <- merged_data %>%
      filter(`ATC kode` %in% atc_codes) %>%
      separate_rows(SubstGruppe, sep = ", ")
    data
  })

  # Dynamic UI for selections
  checkbox_ui_with_toggle <- function(id, label, choices) {
    checkboxGroupInput(id, label, choices = c("Markér alle", choices), selected = c("Markér alle", choices))
  }
  observe_toggle <- function(inputId, input_choices) {
    observeEvent(input[[inputId]], {
      if ("Markér alle" %in% input[[inputId]]) {
        updateCheckboxGroupInput(session, inputId, selected = c("Markér alle", input_choices))
      } else if (setequal(input[[inputId]], input_choices)) {
        updateCheckboxGroupInput(session, inputId, selected = character(0))
      }
    })
  }

  output$product_selection <- renderUI({
    data <- filtered_data()
    req(nrow(data) > 0)
    checkbox_ui_with_toggle("selected_products", "Vælg produktnavne:", unique(data$Produktnavn))
  })
  output$subst_group_selection <- renderUI({
    data <- filtered_data()
    req(nrow(data) > 0)
    groups <- unique(unlist(strsplit(paste(data$SubstGruppe, collapse = ", "), ", ")))
    checkbox_ui_with_toggle("selected_subst_groups", "Vælg substitutionsgrupper:", groups)
  })
  output$region_selection <- renderUI({
    data <- filtered_data()
    req(nrow(data) > 0)
    checkbox_ui_with_toggle("selected_regions", "Vælg regioner:", unique(data$Område))
  })
  observe({
    data <- filtered_data()
    req(nrow(data) > 0)
    observe_toggle("selected_products", unique(data$Produktnavn))
    observe_toggle("selected_subst_groups", unique(unlist(strsplit(paste(data$SubstGruppe, collapse = ", "), ", "))))
    observe_toggle("selected_regions", unique(data$Område))
  })

  # Reactive plot
  plot_reactive <- reactive({
    data <- filtered_data() %>%
      filter(
        Produktnavn %in% input$selected_products,
        SubstGruppe %in% input$selected_subst_groups,
        Område %in% input$selected_regions
      )
    req(nrow(data) > 0)
    y_var <- input$y_axis_option
    if (y_var %in% c("Regionale udgifter til medicintilskud, kr. pr. indbygger", "Mængdesalgsenhed pr. indbygger")) {
      data[[y_var]] <- data[[y_var]] * 100000
    }
    stratify_var <- input$stratify_option
    group_vars <- c("Dato", stratify_var[stratify_var != "None"] )
    data_summary <- data %>%
      group_by(across(all_of(group_vars))) %>%
      summarise(value = sum(.data[[y_var]], na.rm = TRUE), .groups = "drop")
    ggplot(data_summary, aes(x = Dato, y = value, color = if (stratify_var != "None") .data[[stratify_var]] else NULL)) +
      geom_line(size = 1) +
      scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale()), limits = c(0, NA)) +
      labs(title = ifelse(length(unique(data$`ATC tekst`))>0, paste(unique(data$`ATC tekst`), collapse = ", "), "Medicinforbrug"),
           x = "Dato", y = y_axis_labels[[y_var]], color = ifelse(stratify_var!="None", stratify_var, NULL)) +
      theme_minimal(base_size = 16)
  })

  output$line_plot <- renderPlot({ plot_reactive() })

  output$download_pdf <- downloadHandler(
    filename = function() paste0("medicinforbrug_plot_", Sys.Date(), ".pdf"),
    content = function(file) {
      pdf(file, width = 12, height = 8)
      print(plot_reactive())
      dev.off()
    }
  )

  output$summary_table <- renderTable({
    data <- filtered_data()
    req(nrow(data) > 0)
    data %>%
      group_by(SubstGruppe, Styrke) %>%
      summarise(
        Lægemiddelform = first(LægemiddelForm),
        Produktnavne = paste(unique(Produktnavn), collapse = ", "),
        `Gennemsnitlig pris pr. DDD` = mean(`Pris, kr. pr. solgt enhed`, na.rm = TRUE),
        .groups = "drop"
      )
  })
}

# Run the app
shinyApp(ui = ui, server = server)
